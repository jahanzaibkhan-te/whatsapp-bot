{"$message_type":"diagnostic","message":"file not found for module `dsqlite`","code":{"code":"E0583","explanation":"A file wasn't found for an out-of-line module.\n\nErroneous code example:\n\n```compile_fail,E0583\nmod file_that_doesnt_exist; // error: file not found for module\n\nfn main() {}\n```\n\nPlease be sure that a file corresponding to the module exists. If you\nwant to use a module named `file_that_doesnt_exist`, you need to have a file\nnamed `file_that_doesnt_exist.rs` or `file_that_doesnt_exist/mod.rs` in the\nsame directory.\n"},"level":"error","spans":[{"file_name":"src/main.rs","byte_start":200,"byte_end":212,"line_start":10,"line_end":10,"column_start":1,"column_end":13,"is_primary":true,"text":[{"text":"mod dsqlite;","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"to create the module `dsqlite`, create file \"src\\dsqlite.rs\" or \"src\\dsqlite\\mod.rs\"","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"if there is a `mod dsqlite` elsewhere in the crate already, import it with `use crate::...` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0583]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: file not found for module `dsqlite`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc/main.rs:10:1\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mmod dsqlite;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: to create the module `dsqlite`, create file \"src\\dsqlite.rs\" or \"src\\dsqlite\\mod.rs\"\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: if there is a `mod dsqlite` elsewhere in the crate already, import it with `use crate::...` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::tblmessages`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\chatbot.rs","byte_start":64,"byte_end":82,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use crate::tblmessages;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\chatbot.rs","byte_start":60,"byte_end":85,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::tblmessages;","highlight_start":1,"highlight_end":24},{"text":"","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `crate::tblmessages`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\chatbot.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::tblmessages;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>: diesel::Queryable<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\tblmessages.rs","byte_start":995,"byte_end":999,"line_start":37,"line_end":37,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"            .get_result(conn)","highlight_start":25,"highlight_end":29}],"label":"the trait `diesel::Queryable<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not implemented for `std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>`, which is required by `InsertStatement<tbl_messages::table, ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::id, expression::bound::Bound<diesel::sql_types::Nullable<diesel::sql_types::Integer>, &i32>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::device_id, expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::body, expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::from, expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>), tbl_messages::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<columns::id>>: LoadQuery<'_, _, _>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\tblmessages.rs","byte_start":984,"byte_end":994,"line_start":37,"line_end":37,"column_start":14,"column_end":24,"is_primary":false,"text":[{"text":"            .get_result(conn)","highlight_start":14,"highlight_end":24}],"label":"required by a bound introduced by this call","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"the following other types implement trait `diesel::Queryable<ST, DB>`:\n  `(T0, T1)` implements `diesel::Queryable<(ST0, ST1), __DB>`\n  `(T0, T1, T2)` implements `diesel::Queryable<(ST0, ST1, ST2), __DB>`\n  `(T0, T1, T2, T3)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>`\n  `(T0, T1, T2, T3, T4)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>`\n  `(T0, T1, T2, T3, T4, T5)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5), __DB>`\n  `(T0, T1, T2, T3, T4, T5, T6)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5, ST6), __DB>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7), __DB>`\n  `(T0, T1, T2, T3, T4, T5, T6, T7, T8)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8), __DB>`\nand 79 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>` to implement `FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `diesel::sql_types::Nullable<diesel::sql_types::Integer>` to implement `CompatibleType<std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>, Sqlite>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<...>, ..., ..., ...), ...>, ..., ...>` to implement `LoadQuery<'_, SqliteConnection, std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `get_result`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\diesel-2.1.6\\src\\query_dsl\\mod.rs","byte_start":59207,"byte_end":59217,"line_start":1720,"line_end":1720,"column_start":8,"column_end":18,"is_primary":false,"text":[{"text":"    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>","highlight_start":8,"highlight_end":18}],"label":"required by a bound in this associated function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\diesel-2.1.6\\src\\query_dsl\\mod.rs","byte_start":59294,"byte_end":59320,"line_start":1722,"line_end":1722,"column_start":15,"column_end":41,"is_primary":true,"text":[{"text":"        Self: LoadQuery<'query, Conn, U>,","highlight_start":15,"highlight_end":41}],"label":"required by this bound in `RunQueryDsl::get_result`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"the full name for the type has been written to 'D:\\Rust\\wa-chatbot\\target\\debug\\deps\\wa_chatbot-1c3ec5c341283b10.long-type-18084375152111076997.txt'","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"consider using `--verbose` to print the full type name to the console","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>: diesel::Queryable<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not satisfied\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\tblmessages.rs:37:25\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m37\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            .get_result(conn)\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `diesel::Queryable<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>` is not implemented for `std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>`, which is required by `InsertStatement<tbl_messages::table, ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<columns::id, expression::bound::Bound<diesel::sql_types::Nullable<diesel::sql_types::Integer>, &i32>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::device_id, expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::body, expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>, DefaultableColumnInsertValue<ColumnInsertValue<columns::from, expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>), tbl_messages::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<columns::id>>: LoadQuery<'_, _, _>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound introduced by this call\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `diesel::Queryable<ST, DB>`:\u001b[0m\n\u001b[0m               `(T0, T1)` implements `diesel::Queryable<(ST0, ST1), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2)` implements `diesel::Queryable<(ST0, ST1, ST2), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5, ST6), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6, T7)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7), __DB>`\u001b[0m\n\u001b[0m               `(T0, T1, T2, T3, T4, T5, T6, T7, T8)` implements `diesel::Queryable<(ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7, ST8), __DB>`\u001b[0m\n\u001b[0m             and 79 others\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>` to implement `FromSqlRow<diesel::sql_types::Nullable<diesel::sql_types::Integer>, Sqlite>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `diesel::sql_types::Nullable<diesel::sql_types::Integer>` to implement `CompatibleType<std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>, Sqlite>`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<...>, ..., ..., ...), ...>, ..., ...>` to implement `LoadQuery<'_, SqliteConnection, std::result::Result<i32, rocket::response::Debug<diesel::result::Error>>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `get_result`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\diesel-2.1.6\\src\\query_dsl\\mod.rs:1722:15\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1720\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn get_result<'query, U>(self, conn: &mut Conn) -> QueryResult<U>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mrequired by a bound in this associated function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1721\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1722\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Self: LoadQuery<'query, Conn, U>,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `RunQueryDsl::get_result`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: the full name for the type has been written to 'D:\\Rust\\wa-chatbot\\target\\debug\\deps\\wa_chatbot-1c3ec5c341283b10.long-type-18084375152111076997.txt'\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `--verbose` to print the full type name to the console\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `Vec<TblMessages>: Responder<'_, '_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\tblmessages.rs","byte_start":1075,"byte_end":1122,"line_start":44,"line_end":44,"column_start":26,"column_end":73,"is_primary":true,"text":[{"text":"async fn list(db: Db) -> Result<Vec<TblMessages>, diesel::result::Error> {","highlight_start":26,"highlight_end":73}],"label":"the trait `Responder<'_, '_>` is not implemented for `Vec<TblMessages>`, which is required by `std::result::Result<Vec<TblMessages>, diesel::result::Error>: Responder<'_, '_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\tblmessages.rs","byte_start":1037,"byte_end":1048,"line_start":43,"line_end":43,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"#[get(\"/\")]","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[get]","def_site_span":{"file_name":"C:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rocket_codegen-0.5.1\\src/lib.rs","byte_start":10297,"byte_end":10363,"line_start":275,"line_end":275,"column_start":9,"column_end":75,"is_primary":false,"text":[{"text":"        pub fn $name(args: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the trait `Responder<'_, 'static>` is implemented for `Vec<u8>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"for that trait implementation, expected `u8`, found `TblMessages`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<Vec<TblMessages>, diesel::result::Error>` to implement `Responder<'_, '_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `route::handler::<impl Outcome<rocket::Response<'o>, Status, (rocket::Data<'o>, Status)>>::from`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rocket-0.5.1\\src\\route\\handler.rs","byte_start":6400,"byte_end":6417,"line_start":188,"line_end":188,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn from<R: Responder<'r, 'o>>(req: &'r Request<'_>, responder: R) -> Outcome<'r> {","highlight_start":20,"highlight_end":37}],"label":"required by this bound in `route::handler::<impl Outcome<Response<'o>, Status, (Data<'o>, Status)>>::from`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `Vec<TblMessages>: Responder<'_, '_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\tblmessages.rs:44:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[get(\"/\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this procedural macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn list(db: Db) -> Result<Vec<TblMessages>, diesel::result::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Responder<'_, '_>` is not implemented for `Vec<TblMessages>`, which is required by `std::result::Result<Vec<TblMessages>, diesel::result::Error>: Responder<'_, '_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the trait `Responder<'_, 'static>` \u001b[0m\u001b[0m\u001b[1m\u001b[35mis\u001b[0m\u001b[0m implemented for `\u001b[0m\u001b[0m\u001b[1m\u001b[35mVec<u8>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: for that trait implementation, expected `u8`, found `TblMessages`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `std::result::Result<Vec<TblMessages>, diesel::result::Error>` to implement `Responder<'_, '_>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `route::handler::<impl Outcome<rocket::Response<'o>, Status, (rocket::Data<'o>, Status)>>::from`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rocket-0.5.1\\src\\route\\handler.rs:188:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from<R: Responder<'r, 'o>>(req: &'r Request<'_>, responder: R) -> Outcome<'r> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `route::handler::<impl Outcome<Response<'o>, Status, (Data<'o>, Status)>>::from`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `get` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait bound `diesel::result::Error: Responder<'_, '_>` is not satisfied","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src\\tblmessages.rs","byte_start":1075,"byte_end":1122,"line_start":44,"line_end":44,"column_start":26,"column_end":73,"is_primary":true,"text":[{"text":"async fn list(db: Db) -> Result<Vec<TblMessages>, diesel::result::Error> {","highlight_start":26,"highlight_end":73}],"label":"the trait `Responder<'_, '_>` is not implemented for `diesel::result::Error`, which is required by `std::result::Result<Vec<TblMessages>, diesel::result::Error>: Responder<'_, '_>`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\tblmessages.rs","byte_start":1037,"byte_end":1048,"line_start":43,"line_end":43,"column_start":1,"column_end":12,"is_primary":false,"text":[{"text":"#[get(\"/\")]","highlight_start":1,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[get]","def_site_span":{"file_name":"C:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rocket_codegen-0.5.1\\src/lib.rs","byte_start":10297,"byte_end":10363,"line_start":275,"line_end":275,"column_start":9,"column_end":75,"is_primary":false,"text":[{"text":"        pub fn $name(args: TokenStream, input: TokenStream) -> TokenStream {","highlight_start":9,"highlight_end":75}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"the following other types implement trait `Responder<'r, 'o>`:\n  `&'o [u8]` implements `Responder<'r, 'o>`\n  `&'o str` implements `Responder<'r, 'o>`\n  `()` implements `Responder<'r, 'static>`\n  `(ContentType, R)` implements `Responder<'r, 'o>`\n  `(Status, R)` implements `Responder<'r, 'o>`\n  `Accepted<R>` implements `Responder<'r, 'o>`\n  `Arc<[u8]>` implements `Responder<'r, 'static>`\n  `Arc<str>` implements `Responder<'r, 'static>`\nand 40 others","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required for `std::result::Result<Vec<TblMessages>, diesel::result::Error>` to implement `Responder<'_, '_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"required by a bound in `route::handler::<impl Outcome<rocket::Response<'o>, Status, (rocket::Data<'o>, Status)>>::from`","code":null,"level":"note","spans":[{"file_name":"C:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rocket-0.5.1\\src\\route\\handler.rs","byte_start":6400,"byte_end":6417,"line_start":188,"line_end":188,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"    pub fn from<R: Responder<'r, 'o>>(req: &'r Request<'_>, responder: R) -> Outcome<'r> {","highlight_start":20,"highlight_end":37}],"label":"required by this bound in `route::handler::<impl Outcome<Response<'o>, Status, (Data<'o>, Status)>>::from`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: the trait bound `diesel::result::Error: Responder<'_, '_>` is not satisfied\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\tblmessages.rs:44:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m43\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#[get(\"/\")]\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this procedural macro expansion\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0masync fn list(db: Db) -> Result<Vec<TblMessages>, diesel::result::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mthe trait `Responder<'_, '_>` is not implemented for `diesel::result::Error`, which is required by `std::result::Result<Vec<TblMessages>, diesel::result::Error>: Responder<'_, '_>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: the following other types implement trait `Responder<'r, 'o>`:\u001b[0m\n\u001b[0m              `&'o [u8]` implements `Responder<'r, 'o>`\u001b[0m\n\u001b[0m              `&'o str` implements `Responder<'r, 'o>`\u001b[0m\n\u001b[0m              `()` implements `Responder<'r, 'static>`\u001b[0m\n\u001b[0m              `(ContentType, R)` implements `Responder<'r, 'o>`\u001b[0m\n\u001b[0m              `(Status, R)` implements `Responder<'r, 'o>`\u001b[0m\n\u001b[0m              `Accepted<R>` implements `Responder<'r, 'o>`\u001b[0m\n\u001b[0m              `Arc<[u8]>` implements `Responder<'r, 'static>`\u001b[0m\n\u001b[0m              `Arc<str>` implements `Responder<'r, 'static>`\u001b[0m\n\u001b[0m            and 40 others\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: required for `std::result::Result<Vec<TblMessages>, diesel::result::Error>` to implement `Responder<'_, '_>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `route::handler::<impl Outcome<rocket::Response<'o>, Status, (rocket::Data<'o>, Status)>>::from`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\te\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\rocket-0.5.1\\src\\route\\handler.rs:188:20\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m188\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn from<R: Responder<'r, 'o>>(req: &'r Request<'_>, responder: R) -> Outcome<'r> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `route::handler::<impl Outcome<Response<'o>, Status, (Data<'o>, Status)>>::from`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the attribute macro `get` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0583.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0277, E0583.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
